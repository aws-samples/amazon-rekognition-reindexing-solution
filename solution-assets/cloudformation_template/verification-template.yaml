AWSTemplateFormatVersion: '2010-09-09'
Transform: "AWS::Serverless-2016-10-31"

Description: "Amazon Rekognition Face Validation Solution"

Parameters:

  LambdaMaxConcurrencyAvailable:
    Type: Number
    Description: Specify your Lambda Concurrency Limit. Max value is 10000.
    Default: 10000

Resources:
  RecordsBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "rvs-${AWS::StackName}-bucket"

  CheckSQSFunctionRole:
    Type: AWS::IAM::Role
    Properties:
        AssumeRolePolicyDocument:
            Statement:
                Effect: Allow
                Principal:
                    Service: lambda.amazonaws.com
                Action: sts:AssumeRole
        ManagedPolicyArns:
          - arn:aws:iam::aws:policy/AWSLambdaExecute
          - arn:aws:iam::aws:policy/AmazonSQSFullAccess

  CheckSQSFunction:
    Type: AWS::Lambda::Function
    Properties:
        Code:
            S3Bucket: !Sub "rkra-${AWS::Region}"
            S3Key: "validation-assets/lambda_vs_checksqs.zip"
        FunctionName: !Sub "RVS-${AWS::StackName}-CheckSQS"
        Handler: lambda_vs_checksqs.lambda_handler
        MemorySize: 128
        Environment:
            Variables:
              validationsqsurl: !Ref ValidationQueue
        Role: !GetAtt CheckSQSFunctionRole.Arn
        Runtime: python3.12
        Timeout: 20

  ProcessingFunctionRole:
    Type: AWS::IAM::Role
    Properties:
        AssumeRolePolicyDocument:
            Statement:
                Effect: Allow
                Principal:
                    Service: lambda.amazonaws.com
                Action: sts:AssumeRole
        ManagedPolicyArns:
            - arn:aws:iam::aws:policy/AWSLambdaExecute
            - arn:aws:iam::aws:policy/AmazonSQSFullAccess

  ProcessingFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Sub "rkra-${AWS::Region}"
        S3Key: "validation-assets/lambda_vs_processing.zip"
      FunctionName: !Sub "RVS-${AWS::StackName}-Processor"
      Handler: lambda_vs_processing.lambda_handler
      MemorySize: 128
      Environment:
        Variables:
          validationsqsurl: !Ref ValidationQueue
      Role: !GetAtt ProcessingFunctionRole.Arn
      Runtime: python3.12
      Timeout: 20

  ValidationFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSLambdaExecute
        - arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess
        - arn:aws:iam::aws:policy/AmazonSQSFullAccess
        - arn:aws:iam::aws:policy/AmazonKinesisFirehoseFullAccess

  ValidationFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Sub "rkra-${AWS::Region}"
        S3Key: "validation-assets/lambda_vs_validation.zip"
      FunctionName: !Sub "RVS-${AWS::StackName}-Validation"
      Handler: lambda_vs_validation.lambda_handler
      MemorySize: 128
      Environment:
        Variables:
          kinesis_stream: !Ref FirehoseDeliveryStream
      Role: !GetAtt ValidationFunctionRole.Arn
      Runtime: python3.12
      Timeout: 30

  StepFunctionsLambdaFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSLambdaExecute
        - arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess
        - arn:aws:iam::aws:policy/AWSStepFunctionsFullAccess

  StepFunctionsLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri:
        Bucket: !Sub "rkra-${AWS::Region}"
        Key: "validation-assets/lambda_vs_stepfunctions.zip"
      FunctionName: !Sub "RVS-${AWS::StackName}-SFTrigger"
      Handler: lambda_vs_stepfunctions.lambda_handler
      MemorySize: 128
      Environment:
        Variables:
          statemachinearn: !Ref StateMachine
      Role: !GetAtt StepFunctionsLambdaFunctionRole.Arn
      Runtime: python3.12
      Timeout: 20
      Events:
        NewRecordsEvent:
          Type: S3
          Properties:
            Bucket: !Ref RecordsBucket
            Events: s3:ObjectCreated:*
            Filter:
              S3Key:
                Rules:
                  - Name: prefix      # or "prefix"
                    Value: "validation-input/"      # The value to search for in the S3 object key names
                  - Name: suffix      # or "suffix"
                    Value: ".json"      # The value to search for in the S3 object key names

  ValidationQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub "RVS-${AWS::StackName}-ValidationQueue"
      ReceiveMessageWaitTimeSeconds: 0
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt ValidationQueueDLQ.Arn
        maxReceiveCount: 5
      VisibilityTimeout: 30

  ValidationQueueDLQ:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub "RVS-${AWS::StackName}-ValidationQueueDLQ"
      RedriveAllowPolicy: '{"redrivePermission":"allowAll"}'

  EventSourceValidation:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      BatchSize: 1
      Enabled: true
      EventSourceArn: !GetAtt ValidationQueue.Arn
      FunctionName: !GetAtt ValidationFunction.Arn
      ScalingConfig:
        MaximumConcurrency: 1000

  FirehoseRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: firehose.amazonaws.com
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: FirehosePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 's3:AbortMultipartUpload'
                  - 's3:GetBucketLocation'
                  - 's3:GetObject'
                  - 's3:ListBucket'
                  - 's3:ListBucketMultipartUploads'
                  - 's3:PutObject'
                Resource:
                  - !Sub 'arn:aws:s3:::${RecordsBucket}/validation-results*'
                  - !GetAtt RecordsBucket.Arn

  FirehoseDeliveryStream:
    Type: AWS::KinesisFirehose::DeliveryStream
    Properties:
      DeliveryStreamName: !Sub "RVS-${AWS::StackName}-ValidationResults"
      DeliveryStreamType: DirectPut
      ExtendedS3DestinationConfiguration:
        BucketARN: !GetAtt RecordsBucket.Arn
        BufferingHints:
          IntervalInSeconds: 300
          SizeInMBs: 5
        CompressionFormat: UNCOMPRESSED
        Prefix: "validation-results/"
        RoleARN: !GetAtt FirehoseRole.Arn

  StateMachineRole:
    Type: "AWS::IAM::Role"
    Properties:
        ManagedPolicyArns:
            - arn:aws:iam::aws:policy/AmazonS3FullAccess
            - arn:aws:iam::aws:policy/AWSLambda_FullAccess
            - arn:aws:iam::aws:policy/AWSStepFunctionsFullAccess

        AssumeRolePolicyDocument:
            Version: "2012-10-17"
            Statement:
                Effect: "Allow"
                Principal:
                    Service:
                        - !Sub states.${AWS::Region}.amazonaws.com
                Action: "sts:AssumeRole"

  StateMachine:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      RoleArn:
        Fn::GetAtt:
            - StateMachineRole
            - Arn
      StateMachineName: !Sub "RVS-${AWS::StackName}-StateMachine"
      DefinitionString:
        !Sub
        - |-
            {
              "Comment": "Validation Solution Workflow",
              "StartAt": "File Analysis",
              "States": {
                "File Analysis": {
                  "Type": "Map",
                  "ItemProcessor": {
                    "ProcessorConfig": {
                      "Mode": "DISTRIBUTED",
                      "ExecutionType": "EXPRESS"
                    },
                    "StartAt": "ProcessRecords",
                    "States": {
                      "ProcessRecords": {
                        "Type": "Task",
                        "Resource": "arn:aws:states:::lambda:invoke",
                        "OutputPath": "$.Payload",
                        "Parameters": {
                          "Payload.$": "$",
                          "FunctionName": "${lambdaProcessRecords}"
                        },
                        "Retry": [
                          {
                            "ErrorEquals": [
                              "Lambda.ServiceException",
                              "Lambda.AWSLambdaException",
                              "Lambda.SdkClientException",
                              "Lambda.TooManyRequestsException"
                            ],
                            "IntervalSeconds": 2,
                            "MaxAttempts": 6,
                            "BackoffRate": 2
                          }
                        ],
                        "End": true
                      }
                    }
                  },
                  "Label": "FileAnalysis",
                  "ItemReader": {
                    "Resource": "arn:aws:states:::s3:getObject",
                    "ReaderConfig": {
                      "InputType": "JSON",
                      "MaxItems": 100000000
                    },
                    "Parameters": {
                      "Bucket.$": "$.bucket",
                      "Key.$": "$.key"
                    }
                  },
                  "MaxConcurrency": ${lambdaConcurrency},
                  "Next": "CheckSQS",
                  "ItemBatcher": {
                    "MaxItemsPerBatch": 40
                  },
                  "ResultWriter": {
                    "Resource": "arn:aws:states:::s3:putObject",
                    "Parameters": {
                      "Bucket.$": "$.bucket",
                      "Prefix.$": "$.res_prefix"
                    }
                  }
                },
                "CheckSQS": {
                  "Type": "Task",
                  "Resource": "arn:aws:states:::lambda:invoke",
                  "OutputPath": "$.Payload",
                  "Parameters": {
                    "FunctionName": "${lambdaCheckSQS}"
                  },
                  "Retry": [
                    {
                      "ErrorEquals": [
                        "Lambda.ServiceException",
                        "Lambda.AWSLambdaException",
                        "Lambda.SdkClientException",
                        "Lambda.TooManyRequestsException"
                      ],
                      "IntervalSeconds": 2,
                      "MaxAttempts": 6,
                      "BackoffRate": 2
                    }
                  ],
                  "Next": "Choice"
                },
                "Choice": {
                  "Type": "Choice",
                  "Choices": [
                    {
                      "Variable": "$.queuesAreEmpty",
                      "BooleanEquals": false,
                      "Next": "Wait"
                    }
                  ],
                  "Default": "Success"
                },
                "Wait": {
                  "Type": "Wait",
                  "Seconds": 60,
                  "Next": "CheckSQS"
                },
                "Success": {
                  "Type": "Succeed"
                }
              }
            }
        - {
            lambdaCheckSQS: !GetAtt [ CheckSQSFunction, Arn ],
            lambdaProcessRecords: !GetAtt [ ProcessingFunction, Arn ],
            lambdaConcurrency: !Ref LambdaMaxConcurrencyAvailable
        }

Outputs:
  S3Bucket:
    Description: "Records Bucket"
    Value: !Ref RecordsBucket

  StepFunctionsWorkflowUrl:
    Description: "URL of the State Machine"
    Value: !Ref StateMachine
