AWSTemplateFormatVersion: '2010-09-09'
Transform: "AWS::Serverless-2016-10-31"

Description: "Amazon Rekognition Face ReIndex Solution"

Parameters:

  RekognitionIndexFacesTPSLimit:
    Type: Number
    Description: Specify your Rekognition IndexFaces API TPS Limit.
    Default: "50"

  LambdaMaxConcurrencyAvailable:
    Type: Number
    Description: Specify your Lambda Concurrency Limit. Max value is 10000.
    Default: "1000"

  RekognitionIndexFacesQualityFilter:
    Type: String
    Description: A filter that specifies a quality bar for how much filtering is done to identify faces. Filtered faces aren't indexed. If you specify AUTO, Amazon Rekognition chooses the quality bar. If you specify LOW, MEDIUM, or HIGH, filtering removes all faces that don't meet the chosen quality bar. The default value is AUTO.
    Default: "AUTO"

Resources:

  RecordsBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "ris-${AWS::StackName}-bucket"

  CheckSQSFunctionRole:
    Type: AWS::IAM::Role
    Properties:
        AssumeRolePolicyDocument:
            Statement:
                Effect: Allow
                Principal:
                    Service: lambda.amazonaws.com
                Action: sts:AssumeRole
        ManagedPolicyArns:
          - arn:aws:iam::aws:policy/AWSLambdaExecute
          - arn:aws:iam::aws:policy/AmazonSQSFullAccess

  CheckSQSFunction:
    Type: AWS::Lambda::Function
    Properties:
        Code:
            S3Bucket: !Sub "rkra-${AWS::Region}"
            S3Key: "assets/lambda_checksqs.zip"
        FunctionName: !Sub "RIS-${AWS::StackName}-CheckSQS"
        Handler: lambda_checksqs.lambda_handler
        MemorySize: 128
        Environment:
            Variables:
                reindexsqsurl: !Ref ReindexQueue
                dynamosqsurl: !Ref ResultsToDynamoQueue
        Role: !GetAtt CheckSQSFunctionRole.Arn
        Runtime: python3.12
        Timeout: 20

  ProcessingFunctionRole:
    Type: AWS::IAM::Role
    Properties:
        AssumeRolePolicyDocument:
            Statement:
                Effect: Allow
                Principal:
                    Service: lambda.amazonaws.com
                Action: sts:AssumeRole
        ManagedPolicyArns:
            - arn:aws:iam::aws:policy/AWSLambdaExecute
            - arn:aws:iam::aws:policy/AmazonSQSFullAccess

  ProcessingFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Sub "rkra-${AWS::Region}"
        S3Key: "assets/lambda_processing.zip"
      FunctionName: !Sub "RIS-${AWS::StackName}-Processor"
      Handler: lambda_processing.lambda_handler
      MemorySize: 128
      Environment:
        Variables:
          reindexsqsurl: !Ref ReindexQueue
      Role: !GetAtt ProcessingFunctionRole.Arn
      Runtime: python3.12
      Timeout: 20

  ReindexFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSLambdaExecute
        - arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess
        - arn:aws:iam::aws:policy/AmazonRekognitionFullAccess
        - arn:aws:iam::aws:policy/AmazonSQSFullAccess
        - arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess

  ReindexFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Sub "rkra-${AWS::Region}"
        S3Key: "assets/lambda_reindex.zip"
      FunctionName: !Sub "RIS-${AWS::StackName}-ReIndexing"
      Handler: lambda_reindex.lambda_handler
      MemorySize: 128
      Environment:
        Variables:
          dynamosqsurl: !Ref ResultsToDynamoQueue
          qualityfilter: !Ref RekognitionIndexFacesQualityFilter
          dynamologs: !Ref DynamoDBLogsTable
      Role: !GetAtt ReindexFunctionRole.Arn
      Runtime: python3.12
      Timeout: 30

  StepFunctionsLambdaFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSLambdaExecute
        - arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess
        - arn:aws:iam::aws:policy/AWSStepFunctionsFullAccess

  StepFunctionsLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri:
        Bucket: !Sub "rkra-${AWS::Region}"
        Key: "assets/lambda_stepfunctions.zip"
      FunctionName: !Sub "RIS-${AWS::StackName}-SFTrigger"
      Handler: lambda_stepfunctions.lambda_handler
      MemorySize: 128
      Environment:
        Variables:
          statemachinearn: !Ref StateMachine
      Role: !GetAtt StepFunctionsLambdaFunctionRole.Arn
      Runtime: python3.12
      Timeout: 20
      Events:
        NewRecordsEvent:
          Type: S3
          Properties:
            Bucket: !Ref RecordsBucket
            Events: s3:ObjectCreated:*
            Filter:
              S3Key:
                Rules:
                  - Name: prefix      # or "preffix"
                    Value: "records/"      # The value to search for in the S3 object key names
                  - Name: suffix      # or "suffix"
                    Value: ".json"      # The value to search for in the S3 object key names

  ResultsToDynamoFunctionRole:
    Type: AWS::IAM::Role
    Properties:
        AssumeRolePolicyDocument:
            Statement:
              Effect: Allow
              Principal:
                Service: lambda.amazonaws.com
              Action: sts:AssumeRole
        ManagedPolicyArns:
        - arn:aws:iam::aws:policy/CloudWatchLogsFullAccess
        - arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess
        - arn:aws:iam::aws:policy/AmazonSQSFullAccess

  ResultsToDynamoFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Sub "rkra-${AWS::Region}"
        S3Key: "assets/lambda_dynamo.zip"
      FunctionName: !Sub "RIS-${AWS::StackName}-StoreResults"
      Handler: lambda_dynamo.lambda_handler
      MemorySize: 128
      Environment:
        Variables:
          dynamoTable: !Ref DynamoDBTable
      Role: !GetAtt ResultsToDynamoFunctionRole.Arn
      Runtime: python3.12
      Timeout: 30

  ResultsToDynamoQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub "RIS-${AWS::StackName}-StoreQueue"
      ReceiveMessageWaitTimeSeconds: 0
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt ResultsToDynamoDLQ.Arn
        maxReceiveCount: 5
      VisibilityTimeout: 30

  ResultsToDynamoDLQ:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub "RIS-${AWS::StackName}-StoreQueueDLQ"
      RedriveAllowPolicy: '{"redrivePermission":"allowAll"}'

  ReindexQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub "RIS-${AWS::StackName}-FaceReindexQueue"
      ReceiveMessageWaitTimeSeconds: 0
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt FaceReindexDLQ.Arn
        maxReceiveCount: 5
      VisibilityTimeout: 30

  FaceReindexDLQ:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub "RIS-${AWS::StackName}-FaceReindexDLQ"
      RedriveAllowPolicy: '{"redrivePermission":"allowAll"}'

  EventSourceReindex:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      BatchSize: 1
      Enabled: true
      EventSourceArn: !GetAtt ReindexQueue.Arn
      FunctionName: !GetAtt ReindexFunction.Arn
      ScalingConfig:
        MaximumConcurrency: !Ref RekognitionIndexFacesTPSLimit

  EventSourceResultsToDynamo:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      BatchSize: 10
      Enabled: true
      EventSourceArn: !GetAtt ResultsToDynamoQueue.Arn
      FunctionName: !GetAtt ResultsToDynamoFunction.Arn

  DynamoDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
        TableName: !Sub "RIS-${AWS::StackName}-ReIndexResults"
        AttributeDefinitions:
            -   AttributeName: "OldFaceId"
                AttributeType: "S"
        KeySchema:
            -   AttributeName: "OldFaceId"
                KeyType: HASH
        BillingMode: PAY_PER_REQUEST

  DynamoDBLogsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "RIS-${AWS::StackName}-ReIndexLogs"
      AttributeDefinitions:
        - AttributeName: "FaceId"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "FaceId"
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST

  StateMachineRole:
    Type: "AWS::IAM::Role"
    Properties:
        ManagedPolicyArns:
            - arn:aws:iam::aws:policy/AmazonS3FullAccess
            - arn:aws:iam::aws:policy/AWSLambda_FullAccess
            - arn:aws:iam::aws:policy/AWSStepFunctionsFullAccess

        AssumeRolePolicyDocument:
            Version: "2012-10-17"
            Statement:
                Effect: "Allow"
                Principal:
                    Service:
                        - !Sub states.${AWS::Region}.amazonaws.com
                Action: "sts:AssumeRole"

  StateMachine:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      RoleArn:
        Fn::GetAtt:
            - StateMachineRole
            - Arn
      StateMachineName: !Sub "RIS-${AWS::StackName}-StateMachine"
      DefinitionString:
        !Sub
        - |-
            {
              "Comment": "ReIndex Solution Workflow",
              "StartAt": "File Analysis",
              "States": {
                "File Analysis": {
                  "Type": "Map",
                  "ItemProcessor": {
                    "ProcessorConfig": {
                      "Mode": "DISTRIBUTED",
                      "ExecutionType": "EXPRESS"
                    },
                    "StartAt": "ProcessRecords",
                    "States": {
                      "ProcessRecords": {
                        "Type": "Task",
                        "Resource": "arn:aws:states:::lambda:invoke",
                        "OutputPath": "$.Payload",
                        "Parameters": {
                          "Payload.$": "$",
                          "FunctionName": "${lambdaProcessRecords}"
                        },
                        "Retry": [
                          {
                            "ErrorEquals": [
                              "Lambda.ServiceException",
                              "Lambda.AWSLambdaException",
                              "Lambda.SdkClientException",
                              "Lambda.TooManyRequestsException"
                            ],
                            "IntervalSeconds": 2,
                            "MaxAttempts": 6,
                            "BackoffRate": 2
                          }
                        ],
                        "End": true
                      }
                    }
                  },
                  "Label": "FileAnalysis",
                  "ItemReader": {
                    "Resource": "arn:aws:states:::s3:getObject",
                    "ReaderConfig": {
                      "InputType": "JSON",
                      "MaxItems": 100000000
                    },
                    "Parameters": {
                      "Bucket.$": "$.bucket",
                      "Key.$": "$.key"
                    }
                  },
                  "MaxConcurrency": ${lambdaConcurrency},
                  "Next": "CheckSQS",
                  "ItemBatcher": {
                    "MaxItemsPerBatch": 40
                  },
                  "ResultWriter": {
                    "Resource": "arn:aws:states:::s3:putObject",
                    "Parameters": {
                      "Bucket.$": "$.bucket",
                      "Prefix.$": "$.res_prefix"
                    }
                  }
                },
                "CheckSQS": {
                  "Type": "Task",
                  "Resource": "arn:aws:states:::lambda:invoke",
                  "OutputPath": "$.Payload",
                  "Parameters": {
                    "FunctionName": "${lambdaCheckSQS}"
                  },
                  "Retry": [
                    {
                      "ErrorEquals": [
                        "Lambda.ServiceException",
                        "Lambda.AWSLambdaException",
                        "Lambda.SdkClientException",
                        "Lambda.TooManyRequestsException"
                      ],
                      "IntervalSeconds": 2,
                      "MaxAttempts": 6,
                      "BackoffRate": 2
                    }
                  ],
                  "Next": "Choice"
                },
                "Choice": {
                  "Type": "Choice",
                  "Choices": [
                    {
                      "Variable": "$.queuesAreEmpty",
                      "BooleanEquals": false,
                      "Next": "Wait"
                    }
                  ],
                  "Default": "Success"
                },
                "Wait": {
                  "Type": "Wait",
                  "Seconds": 60,
                  "Next": "CheckSQS"
                },
                "Success": {
                  "Type": "Succeed"
                }
              }
            }
        - {
            lambdaCheckSQS: !GetAtt [ CheckSQSFunction, Arn ],
            lambdaProcessRecords: !GetAtt [ ProcessingFunction, Arn ],
            lambdaConcurrency: !Ref LambdaMaxConcurrencyAvailable
        }

Outputs:
  S3Bucket:
    Description: "Records Bucket"
    Value: !Ref RecordsBucket

  StepFunctionsWorkflowUrl:
    Description: "URL of the State Machine"
    Value: !Ref StateMachine

  DynamoDBTable:
    Description: "Results Table"
    Value: !Ref DynamoDBTable